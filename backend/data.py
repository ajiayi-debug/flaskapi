import pandas as pd
from gpt import *
from tqdm import tqdm
#columns: Index(['name', 'short_description', 'long_description', 'genres',
# 'minimum_system_requirement', 'recommend_system_requirement',
# 'release_date', 'developer', 'publisher', 'overall_player_rating',
# 'number_of_reviews_from_purchased_people', 'number_of_english_reviews',
# 'link'],dtype='object')

#retrieve row according to keywaord matching w query. keyword generation done by gpt 4o for accuracy
def retrieve_relevant_rows(query, csv, top_n=3):
    df=pd.read_csv(csv)
    #generate keywords using gpt 4o for accuracy
    keywords = generate_keywords(query)

    def row_contains_keywords(row):
        return any(keyword in str(value).lower() for value in row for keyword in keywords)

    # Filter the DataFrame for rows where any column contains any keyword
    matching_rows = df[df.apply(row_contains_keywords, axis=1)]

    # Return the top N matching rows as dictionaries
    return matching_rows.head(top_n).to_dict(orient='records')

# Create .csv of metadata so we can perform column-wide queries
def data_info_col(csv, output_csv="column_summary_info.csv"):
    # Load the CSV file into a DataFrame
    df = pd.read_csv(csv)
    
    # Prepare data for summary information
    column_names = df.columns.tolist()
    total_rows = len(df)
    
    # Generate summaries for each column
    column_summaries = []
    for col in tqdm(column_names, desc="Processing metadata"):
        column_data = df[col].tolist()
        #call gpt 4o to generate summary per column and their respective column name for context
        summary = summarise_cols(col,column_data)
        column_summaries.append(summary)
    
    # Create a DataFrame to store the summary information
    summary_df = pd.DataFrame({
        "Column Name": column_names,
        "Description": column_summaries,
        "Total Rows": [total_rows] * len(column_names)  # Same count for each column
    })
    
    # Save the summary information to a CSV file
    summary_df.to_csv(output_csv, index=False)
    
    return column_names, total_rows, output_csv



# Generate the metadata from csv generated by data_info_col
def generate_context_from_csv(csv):
    df=pd.read_csv(csv)
    context = "Dataset Column Summaries:\n\n"
    for _, row in df.iterrows():
        column_name = row['Column Name']
        description = row['Description']
        total_rows = row['Total Rows']
        
        # Format each column's description
        context += f"Column: {column_name}\n"
        context += f"Description: {description}\n"
        context += f"Total Rows: {total_rows}\n\n"
    
    return context



